{
	"name": "df_transform_testing_data",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "testing"
				},
				{
					"dataset": {
						"referenceName": "ds_date_lookup_dl",
						"type": "DatasetReference"
					},
					"name": "dimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_county_lookup_dl",
						"type": "DatasetReference"
					},
					"name": "countryLookupSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_testing_data",
						"type": "DatasetReference"
					},
					"name": "sinkTesting"
				}
			],
			"transformations": [
				{
					"name": "aggregateDate"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "lookupDate"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectRequiredColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as integer,",
				"          tests_done as integer,",
				"          population as integer,",
				"          testing_rate as double,",
				"          positivity_rate as double,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> testing",
				"source(output(",
				"          date_key as date,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDate",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryLookupSource",
				"dimDate aggregate(groupBy(year,",
				"          week_of_year),",
				"     start_date = min(date),",
				"          end_date = max(date)) ~> aggregateDate",
				"aggregateDate derive(year_week = toString(year)+\"-W\"+lpad(toString(week_of_year),2,'0')) ~> derivedColumn1",
				"testing, derivedColumn1 lookup(testing@year_week == toString(year)+'-W'+lpad(toString(week_of_year),2,'0'),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDate",
				"lookupDate, countryLookupSource lookup(testing@country == countryLookupSource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = testing@country,",
				"          country_code_3_digit,",
				"          country_code_2_digit,",
				"          year_week = testing@year_week,",
				"          week_start_date = start_date,",
				"          week_end_date = end_date,",
				"          new_cases,",
				"          tests_done,",
				"          population = testing@population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
				"selectRequiredColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkTesting"
			]
		}
	}
}